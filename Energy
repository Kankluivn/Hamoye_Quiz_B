#Stage B Quiz

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler


df = pd.read_csv('energydata_complete.csv')

simple_linear_reg_df = df[['T2',
                    'T6']].sample(15, random_state=2)
#print(simple_linear_reg_df)

#Regression Plot
sns.regplot(y='T6', x='T2', data=simple_linear_reg_df)

df = pd.read_csv('energydata_complete.csv')
df = df.drop(columns=['date', 'lights'])
#date and lights were dropped for data cleaning purposes
#print(df)

#scaler = MinMaxScaler()
#normalized_df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)
#print(normalized_df)
#target_feature = normalized_df['T6']
#print(target_feature)

target_feature = df['T6']

#Data Splitting - select 70% of the data for training, 30% for test
x_train, x_test, y_train, y_test = train_test_split(df,
target_feature, test_size = 0.3, random_state = 1)

#Train the data
from sklearn.linear_model import LinearRegression
train_model = LinearRegression()
train_model.fit(x_train, y_train)

#Predict outcomes on test data using trained data
predicted_values = train_model.predict(x_test)
#print(predicted_values)

#Model performance measurement
from sklearn.metrics import mean_absolute_error as mae
mae = mae(y_test, predicted_values)
print (round (mae, 2))

from sklearn.metrics import r2_score
r2_score = r2_score(y_test, predicted_values)
print(round(r2_score, 2))

import numpy as np
from sklearn.metrics import mean_squared_error as mse
rmse = np.sqrt(mse(y_test, predicted_values))
print (round(rmse, 3))

rss = np.sum(np.square(y_test - predicted_values))
print (round(rss, 2))


#comparing the effects of regularisation
def get_weights_df(model, feat, col_name):
  #this function returns the weight of every feature
  weights = pd.Series(model.coef_, feat.columns).sort_values()
  weights_df = pd.DataFrame(weights).reset_index()
  weights_df.columns = ['Features', col_name]
  weights_df[col_name].round(3)
  return weights_df

from sklearn.linear_model import Lasso as lasso_reg
from sklearn.linear_model import Ridge as ridge_reg
#linear_model_weights = get_weights_df(model, x_train, 'Linear_Model_Weight')
ridge_weights_df = get_weights_df(ridge_reg, x_train, 'Ridge_Weight')
lasso_weights_df = get_weights_df(lasso_reg, x_train, 'Lasso_weight')

print(ridge_weights_df)






